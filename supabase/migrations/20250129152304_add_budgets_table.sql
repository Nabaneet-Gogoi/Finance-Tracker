create table if not exists public.budgets (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    name text not null,
    amount decimal(10,2) not null,
    spent decimal(10,2) default 0,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create a trigger to update the updated_at column
create or replace function public.handle_updated_at()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

create trigger handle_budgets_updated_at
    before update on public.budgets
    for each row
    execute function public.handle_updated_at();

-- Add RLS policies
alter table public.budgets enable row level security;

create policy "Users can view their own budgets"
    on public.budgets for select
    using (auth.uid() = user_id);

create policy "Users can insert their own budgets"
    on public.budgets for insert
    with check (auth.uid() = user_id);

create policy "Users can update their own budgets"
    on public.budgets for update
    using (auth.uid() = user_id);

create policy "Users can delete their own budgets"
    on public.budgets for delete
    using (auth.uid() = user_id); 